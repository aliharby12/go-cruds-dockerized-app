basePath: /api/v1
definitions:
  schema.CreatePostRequest:
    properties:
      description:
        type: string
      title:
        type: string
    type: object
  schema.CreateUserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  schema.ListPostsResponse:
    properties:
      count:
        type: integer
      errors:
        type: string
      posts:
        items:
          $ref: '#/definitions/schema.ViewPostResponse'
        type: array
    type: object
  schema.ListUsersResponse:
    properties:
      count:
        type: integer
      errors:
        type: string
      users:
        items:
          $ref: '#/definitions/schema.ViewUserResponse'
        type: array
    type: object
  schema.TokenResponse:
    properties:
      access_token:
        type: string
    type: object
  schema.UpdatePostRequest:
    properties:
      description:
        type: string
      title:
        type: string
    type: object
  schema.ViewPostResponse:
    properties:
      CreatedAt:
        type: string
      DeletedAt:
        type: string
      Description:
        type: string
      ID:
        type: integer
      Title:
        type: string
      UpdatedAt:
        type: string
    type: object
  schema.ViewUserResponse:
    properties:
      CreatedAt:
        type: string
      DeletedAt:
        type: string
      ID:
        type: integer
      Role:
        type: string
      UpdatedAt:
        type: string
      Username:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /myposts:
    get:
      description: Get a list of all my posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.ListPostsResponse'
      summary: List all my posts
      tags:
      - Posts
  /posts:
    get:
      description: Get a list of all posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.ListPostsResponse'
      summary: List all posts
      tags:
      - Posts
    post:
      consumes:
      - application/json
      description: Create a new post with the provided data
      parameters:
      - description: Post data in JSON format
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/schema.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schema.ViewPostResponse'
      summary: Create a new post
      tags:
      - Posts
  /posts/{id}:
    delete:
      description: Delete a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete post
      tags:
      - Posts
    get:
      description: Get details of a single post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.ViewPostResponse'
      summary: View single post
      tags:
      - Posts
    put:
      consumes:
      - application/json
      description: Update an existing post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/schema.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.ViewPostResponse'
      summary: Update post
      tags:
      - Posts
  /users:
    get:
      description: Get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.ListUsersResponse'
      summary: List all users
      tags:
      - Users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login a user and generate a JWT token
      parameters:
      - description: User data in JSON format
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/schema.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.TokenResponse'
      summary: Login a user
      tags:
      - Users
  /users/profile:
    get:
      description: Get details of my profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.ViewUserResponse'
      summary: View my profile
      tags:
      - Users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user and generate a JWT token
      parameters:
      - description: User data in JSON format
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/schema.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schema.TokenResponse'
      summary: Register a new user
      tags:
      - Users
  /users/user-posts/{id}:
    get:
      description: Get a list of all user posts
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.ListPostsResponse'
      summary: List all user posts
      tags:
      - Users
securityDefinitions:
  Authorization:
    in: header
    name: Bearer
    type: apiKey
swagger: "2.0"
